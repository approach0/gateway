user root root;
worker_processes 1;
error_log stderr notice;

events {
	worker_connections 1024;
}

http {
	include /etc/openresty/mime.types;
	access_log logs/access.log;
	resolver 127.0.0.11 valid=30s ipv6=off;
	# define rate-limit zones
	limit_req_zone $binary_remote_addr zone=slow:10m rate=1r/s;  # avg. 1  per sec
	limit_req_zone $binary_remote_addr zone=high:10m rate=90r/m; # avg. 90 per min

	lua_socket_log_errors on;
	# Service discovery and protection
	lua_shared_dict service_name 8m;
	lua_shared_dict service_port 8m;
	lua_shared_dict protect_path 8m;
	# Prometheus metrics
	lua_shared_dict metrics 10m;
	# global JWT secret
	lua_shared_dict JWT 1m;

	init_worker_by_lua_file ./conf/init.lua;

	server {
		# burst: allow sequential packets in a short time frame.
		# here the number represents the queue size for a burst.
		limit_req zone=high burst=50 nodelay;
		limit_req_status 503;

		listen 80 default_server;
		listen [::]:80 default_server;
		server_name  _;

		location / {
			set $service_addr '';
			set $service_route '_root_';
			set $modified_uri '/'; # placeholder
			access_by_lua_file ./conf/rewrite.lua;

			proxy_pass http://$service_addr;
		}

		log_by_lua_block {
			metric_requests:inc(1)
			metric_latency:observe(tonumber(ngx.var.request_time))
		}
		location = /metrics {
			content_by_lua_block {
				prometheus:collect()
			}
		}

		location = /services {
			proxy_pass http://unix:/var/run/docker.sock:/services;
		}

		location ~ ^/([^/]+)(.*) {
			set $service_addr '';
			set $service_route $1;
			set $modified_uri $2;
			access_by_lua_file ./conf/rewrite.lua;

			proxy_pass http://$service_addr$modified_uri$is_args$args;
		}
	}
}
