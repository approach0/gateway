user root root;
worker_processes 1;
error_log stderr notice;

events {
	worker_connections 1024;
}

http {
	include /etc/openresty/mime.types;
	access_log logs/access.log;
	lua_shared_dict service_port 10m;
	lua_socket_log_errors on;

	init_worker_by_lua_file ./conf/service_discovery.lua;

	server {
		listen 80 default_server;
		listen [::]:80 default_server;
		server_name  _;

		resolver 127.0.0.11 valid=30s ipv6=off;

		location / {
			set $service_addr '';
			access_by_lua_block {
				local ukey = 'root_index'
				local service_port = ngx.shared.service_port
				local port = service_port:get(ukey)
				if not port then
					ngx.say('[gateway] service "', ukey, '" not found ...')
					ngx.exit(ngx.HTTP_OK)
				else
					local addr = ukey .. ':' .. port
					ngx.var.service_addr = addr
				end
			}
			proxy_pass http://$service_addr;
		}

		location ~ ^/dockersock/(.*) {
			set $dockersock_uri $1;
			proxy_pass http://unix:/var/run/docker.sock:/$dockersock_uri;
		}

		location ~ ^/([-_a-zA-Z0-9]+)(.*) {
			set $service_addr '';
			set $service_ukey $1;
			set $modified_uri $2;
			access_by_lua_block {
				local ukey = ngx.var.service_ukey
				-- return backend address and URI
				local service_port = ngx.shared.service_port
				local port = service_port:get(ukey)
				if not port then
					ngx.say('[gateway] service "', ukey, '" not found ...')
					ngx.exit(ngx.HTTP_OK)
				else
					local addr = ukey .. ':' .. port
					ngx.var.service_addr = addr
					if ngx.var.modified_uri == '' then
						ngx.var.modified_uri = '/'
					end
				end
			}

			proxy_pass http://$service_addr$modified_uri;
		}
	}
}
