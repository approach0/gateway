user root root;
worker_processes 2;
error_log stderr notice;

events {
	worker_connections 1024;
}

http {
	include /etc/openresty/mime.types;
	access_log off; # for performance
	resolver 127.0.0.11 valid=30s ipv6=off;
	# define rate-limit zones (N requests per minute)
	limit_req_zone $binary_remote_addr zone=myratelimit:10m rate=128r/m;
	limit_conn_zone $binary_remote_addr zone=perip:10m;

	sendfile on;
	sendfile_max_chunk 512k;

	lua_socket_log_errors on;
	# Service discovery and protection
	lua_shared_dict route_map 8m;
	lua_shared_dict route_rrb 8m;
	lua_shared_dict protected 8m;
	# Prometheus metrics
	lua_shared_dict metrics 10m;
	# global JWT secret
	lua_shared_dict JWT 1m;

	init_worker_by_lua_file ./conf/init.lua;

	gzip on;
	gzip_disable "msie6";
	gzip_min_length 1000;
	gzip_comp_level 5;
	gzip_proxied any;
	gzip_types
		text/plain
		text/css
		application/javascript
		image/gif
		image/png
		image/jpeg
		image/svg+xml
		image/x-icon;

	server {
		listen 80 default_server;

		# accessible internally for plain HTTP request
		location = /metrics {
			content_by_lua_file ./conf/metrics.lua;
		}

		# nothing but a redirection from HTTPS to HTTP
		location / {
			return 301 https://$host$request_uri;
		}
	}

	server {
		# burst: allow sequential packets in a short time frame.
		# here the number represents the queue size for a burst.
		limit_req zone=myratelimit burst=20 nodelay;
		limit_req_status 429;
		limit_conn perip 10;
		limit_conn_status 503;

		# expose http by default, use docker entrypoint to
		# automatically delete, uncomment below and switch to https.
		listen 443 default_server; # DELETE_THIS
		listen [::]:443 default_server; # DELETE_THIS
		# UNCOMMENT_THIS listen 443 ssl default_server;
		# UNCOMMENT_THIS listen [::]:443 ssl default_server;
		# UNCOMMENT_THIS ssl_certificate /root/cert.pem;
		# UNCOMMENT_THIS ssl_certificate_key /root/key.pem;

		server_name  _;

		# geoIP information variables
		set $geo_city 'Unknown';
		set $geo_subd 'Unknown';
		set $geo_ctry 'Unknown';
		set $geo_longitude 'Unknown';
		set $geo_latitude  'Unknown';

		location / {
			set $service_addr '';
			set $service_route '_root_';
			set $modified_uri '/'; # placeholder
			access_by_lua_file ./conf/rewrite.lua;

			include proxy.conf;
			proxy_pass http://$service_addr;
		}

		location ^~ /.well-known/ {
			default_type text/plain;
			root /root;
		}

		log_by_lua_block {
			metric_request_uri:inc(1, {ngx.var.uri, ngx.var.status})

			local success, geo_info = geo_lookup(ngx.var.remote_addr)
			if success then
				metric_request_geoip:inc(1, {
					ngx.var.remote_addr,
					geo_info.city,
					geo_info.region,
					geo_info.country,
					geo_info.longitude,
					geo_info.latitude
				})
			end

			metric_response_bytes:inc(tonumber(ngx.var.bytes_sent), {ngx.var.uri})

			metric_request_timecost:inc(tonumber(ngx.var.request_time), {ngx.var.uri})
		}

		location = /metrics {
			content_by_lua_file ./conf/metrics.lua;
		}

		location = /geolookup {
			content_by_lua_block {
				local ip = ngx.var.arg_ip or ngx.var.remote_addr
				local success, info = geo_lookup(ip)
				if success then
					ngx.print(ip, ': ', cjson.encode(info))
					ngx.exit(ngx.HTTP_OK)
				else
					ngx.print(ip, ': ', info)
					ngx.exit(ngx.HTTP_OK)
				end
			}
		}

		location = /swarm_services {
			limit_except GET {deny  all;}
			proxy_pass http://unix:/var/run/docker.sock:/services;
		}

		location = /swarm_nodes {
			limit_except GET {deny  all;}
			proxy_pass http://unix:/var/run/docker.sock:/nodes;
		}

		location ~ ^/([^/]+)(.*) {
			set $service_addr '';
			set $service_route $1;
			set $modified_uri $2;
			access_by_lua_file ./conf/rewrite.lua;

			include proxy.conf;
			proxy_pass http://$service_addr$modified_uri$is_args$args;
		}
	}
}
